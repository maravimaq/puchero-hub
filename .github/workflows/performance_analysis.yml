name: Contributor Performance Analysis

on:
  workflow_dispatch: # Permite ejecución manual
  pull_request:     # Se ejecuta automáticamente en cada PR

jobs:
  analyze-performance:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Dependencies
      run: pip install requests PyGithub

    - name: Analyze Contributor Performance
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python <<EOF
        import os
        from github import Github
        from datetime import datetime, timedelta, timezone

        # Configuración
        REPO_NAME = os.getenv("GITHUB_REPOSITORY")
        TOKEN = os.getenv("GITHUB_TOKEN")
        g = Github(TOKEN)
        repo = g.get_repo(REPO_NAME)

        contributors_data = {}
        now = datetime.now(timezone.utc)
        start_date = now - timedelta(days=30)  # Últimos 30 días

        # Total de commits
        all_commits = list(repo.get_commits(since=start_date))
        total_commits = len(all_commits)
        commit_average = total_commits / len(repo.get_contributors())

        # Total de issues
        all_closed_issues = list(repo.get_issues(state="closed", since=start_date))
        total_issues = len(all_closed_issues)
        issue_average = total_issues / len(repo.get_contributors())

        # Procesa commits
        for commit in all_commits:
            if commit.author:
                username = commit.author.login
                contributors_data.setdefault(username, {
                    "commits": 0, "issues": 0, "pull_requests": 0, "workflows": 0, "tests": []
                })
                contributors_data[username]["commits"] += 1

        # Procesa issues cerradas
        for issue in all_closed_issues:
            if issue.closed_by:
                username = issue.closed_by.login
                contributors_data.setdefault(username, {
                    "commits": 0, "issues": 0, "pull_requests": 0, "workflows": 0, "tests": []
                })
                contributors_data[username]["issues"] += 1

        # Procesa pull requests
        for pr in repo.get_pulls(state="closed"):
            if pr.merged_at and pr.merged_at > start_date:
                username = pr.user.login
                contributors_data.setdefault(username, {
                    "commits": 0, "issues": 0, "pull_requests": 0, "workflows": 0, "tests": []
                })
                contributors_data[username]["pull_requests"] += 1

        # Procesa workflows
        workflows_dir = ".github/workflows"
        if os.path.exists(workflows_dir):
            for root, dirs, files in os.walk(workflows_dir):
                for file in files:
                    filepath = os.path.join(root, file)
                    modified_by = repo.get_commits(path=filepath)
                    for commit in modified_by:
                        if commit.author:
                            username = commit.author.login
                            contributors_data.setdefault(username, {
                                "commits": 0, "issues": 0, "pull_requests": 0, "workflows": 0, "tests": []
                            })
                            contributors_data[username]["workflows"] = 10  # Máximo 10 si ha modificado un workflow

        # Procesa tests
        for commit in all_commits:
            if commit.author:
                username = commit.author.login
                for file in commit.files:
                    if file.filename.startswith("test") or file.filename == "locustfile.py":
                        contributors_data[username]["tests"].append(file.filename)

        # Genera puntuaciones y tabla
        output = "| Contribuidor | Commits | Nota Commits | Issues Cerradas | Nota Issues | Pull Requests | Nota Pull Requests | Workflows | Nota Workflows | Tests | Nota Tests | Nota Final |\n"
        output += "|--------------|---------|--------------|----------------|------------|---------------|---------------------|-----------|---------------|-------|-----------|-----------|\n"

        for user, data in contributors_data.items():
            # Nota commits
            commit_score = min((data["commits"] / commit_average) * 10, 10)

            # Nota issues
            issue_score = min((data["issues"] / issue_average) * 10, 10)

            # Nota pull requests
            pr_score = min((data["pull_requests"] / (total_issues / 10)) * 10, 10)

            # Nota tests
            unique_test_types = len(set(data["tests"]))
            if unique_test_types >= 4:
                test_score = 10
            elif unique_test_types == 3:
                test_score = 5
            elif unique_test_types == 2:
                test_score = 2
            elif unique_test_types == 1:
                test_score = 1
            else:
                test_score = 0

            # Nota final
            final_score = (
                commit_score * 0.2 +
                issue_score * 0.2 +
                pr_score * 0.2 +
                data["workflows"] * 0.2 +
                test_score * 0.2
            )

            output += (
                f"| {user} | {data['commits']} | {commit_score:.2f} | {data['issues']} | {issue_score:.2f} | "
                f"{data['pull_requests']} | {pr_score:.2f} | {data['workflows']} | {data['workflows']:.2f} | "
                f"{unique_test_types} | {test_score:.2f} | {final_score:.2f} |\n"
            )

        print(output)

        # Guarda el resultado en docs/
        os.makedirs("docs", exist_ok=True)
        with open("docs/contributor_performance.md", "w") as f:
            f.write("# Contributor Performance Analysis\n\n")
            f.write(output)
        EOF

    - name: Commit and Push Results
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add docs/contributor_performance.md
        git commit -m "Update contributor performance analysis"
        git push
