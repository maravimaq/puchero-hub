name: Update Coverage Badge

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  update-coverage:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: uvlhub_root_password
          MYSQL_DATABASE: uvlhubdb_test
          MYSQL_USER: uvlhub_user
          MYSQL_PASSWORD: uvlhub_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ensure all branches and history are available

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Tests and Generate Coverage Badge
      env:
        FLASK_ENV: testing
        MARIADB_HOSTNAME: 127.0.0.1
        MARIADB_PORT: 3306
        MARIADB_TEST_DATABASE: uvlhubdb_test
        MARIADB_USER: uvlhub_user
        MARIADB_PASSWORD: uvlhub_password
      run: |
        coverage run -m pytest app/modules/ --ignore-glob='*selenium*'
        rm -f coverage.svg
        coverage-badge -o coverage.svg

    - name: Handle Conflicts and Commit Badge
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        git stash push -m "Temporary stash for coverage badge changes" || echo "No changes to stash"

        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Pull request detected. Checking out the source branch: ${{ github.head_ref }}"
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
          git checkout ${{ github.head_ref }}
        else
          echo "Push event detected. Using branch: ${{ github.ref_name }}"
          git checkout ${{ github.ref_name }}
        fi

        git stash list | grep "Temporary stash for coverage badge changes" && git stash pop || echo "No stash to apply"

        if git ls-files -u | grep -q coverage.svg; then
          echo "Conflict detected in coverage.svg. Overwriting with generated file."
          cp coverage.svg coverage.resolved.svg
          mv coverage.resolved.svg coverage.svg
          git add coverage.svg
        fi

        git add coverage.svg
        git commit -m "Update coverage badge" || echo "No changes to commit"
        git push origin HEAD:${{ github.head_ref || github.ref_name }}
