name: Zenhub Workflow

on:
  issues:
    types: [opened, edited, closed]
  pull_request:
    types: [opened, closed]

jobs:
  update-zenhub:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install requests

    - name: Update Zenhub Pipeline
      env:
        ZENHUB_API_TOKEN: ${{ secrets.ZENHUB_API_TOKEN }}
      run: |
        python - <<EOF
        import requests
        import os

        # Configuración
        ZENHUB_API_URL = "https://api.zenhub.com/p1/repositories/{repo_id}/issues/{issue_number}/moves"
        ZENHUB_TOKEN = os.getenv("ZENHUB_API_TOKEN")
        REPO_ID = "871646266"  # ID del repositorio de GitHub

        # Pipeline IDs
        PIPELINES = {
            "new_issues": "Z2lkOi8vcmFwdG9yL1BpcGVsaW5lLzMzODc2NzM",
            "in_progress": "Z2lkOi8vcmFwdG9yL1BpcGVsaW5lLzMzODc2Nzc",
            "review_qa": "Z2lkOi8vcmFwdG9yL1BpcGVsaW5lLzMzODc2Nzg",
            "done": "Z2lkOi8vcmFwdG9yL1BpcGVsaW5lLzMzODc2Nzk"
        }

        # Obtener el número de la issue desde el contexto de GitHub Actions
        ISSUE_NUMBER = os.getenv("ISSUE_NUMBER")
        EVENT_NAME = os.getenv("GITHUB_EVENT_NAME")

        if not ISSUE_NUMBER:
            print("No ISSUE_NUMBER provided. Skipping Zenhub update.")
            exit(0)

        # Decidir a qué pipeline mover basado en el evento
        if EVENT_NAME == "issues" and os.getenv("GITHUB_EVENT_ACTION") == "opened":
            pipeline_id = PIPELINES["new_issues"]
        elif EVENT_NAME == "pull_request" and os.getenv("GITHUB_EVENT_ACTION") == "opened":
            pipeline_id = PIPELINES["in_progress"]
        elif EVENT_NAME == "pull_request" and os.getenv("GITHUB_EVENT_ACTION") == "closed":
            pipeline_id = PIPELINES["review_qa"]
        elif EVENT_NAME == "issues" and os.getenv("GITHUB_EVENT_ACTION") == "closed":
            pipeline_id = PIPELINES["done"]
        else:
            print("No matching pipeline for this event.")
            exit(0)

        # Encabezados para la solicitud
        headers = {
            "X-Authentication-Token": ZENHUB_TOKEN,
            "Content-Type": "application/json",
        }

        # Datos para mover la issue al pipeline correspondiente
        data = {
            "pipeline_id": pipeline_id,
            "position": "top"
        }

        # Realiza la solicitud a la API de Zenhub
        response = requests.post(
            ZENHUB_API_URL.format(repo_id=REPO_ID, issue_number=ISSUE_NUMBER),
            json=data,
            headers=headers,
        )

        if response.status_code == 200:
            print(f"Issue #{ISSUE_NUMBER} successfully moved to pipeline {pipeline_id}.")
        else:
            print(f"Failed to update issue #{ISSUE_NUMBER}: {response.status_code}, {response.text}")
        EOF
