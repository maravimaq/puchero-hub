# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class TestUntitled:

    def setup_method(self, method):
        # Configuración de ChromeDriver y Chrome
        options = Options()
        service = Service("/usr/bin/chromedriver")
        self.driver = webdriver.Chrome(service=service, options=options)
        self.driver.get("http://localhost:5000/")

    def teardown_method(self, method):
        # Cerrar el navegador después de cada prueba
        self.driver.quit()

    def test_empty_communities_message(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user4@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Navegar a comunidades
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "My Communities").click()

        no_communities_message = self.driver.find_element(By.CSS_SELECTOR, ".text-muted").text
        assert "You are not part of any communities." in no_communities_message, "Message for no communities is missing."

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_user_communities_list(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user1@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Navegar a comunidades
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "My Communities").click()

        # Verifica que se muestran las comunidades
        community_list = self.driver.find_elements(By.CLASS_NAME, "list-group-item")
        assert len(community_list) > 0, "No communities displayed, but the user has communities."

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_create_new_community_button(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user1@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Navegar a comunidades
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "My Communities").click()

        # Hacer clic en "Create New Community"
        self.driver.find_element(By.LINK_TEXT, "Create New Community").click()

        # Verifica que la URL corresponde a la página de creación de comunidades
        assert "create" in self.driver.current_url, "Failed to navigate to Create Community page."

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_edit_community_button(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user1@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Navegar a comunidades
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "My Communities").click()

        # Busca el botón de editar para la primera comunidad
        edit_buttons = self.driver.find_elements(By.LINK_TEXT, "Edit")
        assert len(edit_buttons) > 0, "No edit buttons found for communities owned by the user."

        # Haz clic en el primer botón de editar
        edit_buttons[0].click()

        # Verifica que la URL corresponde a la página de edición
        assert "edit" in self.driver.current_url, "Failed to navigate to Edit Community page."

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_delete_community_button(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user1@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Navegar a comunidades
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "My Communities").click()

        # Busca el botón de eliminar para la primera comunidad
        delete_buttons = self.driver.find_elements(By.XPATH, "//button[contains(text(), 'Delete')]")
        assert len(delete_buttons) > 0, "No delete buttons found for communities owned by the user."

        delete_buttons[0].click()
        alert = self.driver.switch_to.alert
        assert "Are you sure you want to delete this community?" in alert.text, "Delete confirmation alert did not appear."
        alert.dismiss()  # Cancela la eliminación

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_create_valid_community(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user1@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Navegar a comunidades
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "My Communities").click()

        # Crear nueva comunidad
        self.driver.find_element(By.LINK_TEXT, "Create New Community").click()
        self.driver.find_element(By.ID, "name").click()
        self.driver.find_element(By.ID, "name").send_keys("Probemos las comunidades")
        self.driver.find_element(By.ID, "description").click()
        self.driver.find_element(By.ID, "description").send_keys(
            "Quiero probar a crear una comunidad con selenium"
        )
        self.driver.find_element(By.ID, "submit").click()

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_create_community_empty_fields(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user1@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Navegar a comunidades
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "My Communities").click()

        # Crear nueva comunidad
        self.driver.find_element(By.LINK_TEXT, "Create New Community").click()
        self.driver.find_element(By.ID, "submit").click()

        name_error = self.driver.find_element(By.ID, "name").get_attribute("validationMessage")

        assert "fill out this field" in name_error or "Completa este campo" in name_error

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_create_duplicated_community(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user1@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Navegar a comunidades
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "My Communities").click()

        # Intenta crear dos comunidades con el mismo nombre
        self.driver.find_element(By.LINK_TEXT, "Create New Community").click()
        self.driver.find_element(By.ID, "name").click()
        self.driver.find_element(By.ID, "name").send_keys("Probemos las comunidades")
        self.driver.find_element(By.ID, "description").click()
        self.driver.find_element(By.ID, "description").send_keys(
            "Quiero probar a crear una comunidad con selenium"
        )
        self.driver.find_element(By.ID, "submit").click()

        assert self.driver.current_url == "http://localhost:5000/community/create"

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_successful_edit(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user1@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Navegar a comunidades
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "My Communities").click()

        # Encuentra una comunidad para editar
        self.driver.find_element(By.LINK_TEXT, "Edit").click()

        # Cambia el nombre y la descripción
        name_field = self.driver.find_element(By.ID, "name")
        description_field = self.driver.find_element(By.ID, "description")
        name_field.clear()
        name_field.send_keys("Updated Community Name")
        description_field.clear()
        description_field.send_keys("This is an updated description for the community.")

        # Envía el formulario
        self.driver.find_element(By.CSS_SELECTOR, "input[type='submit']").click()

        # Verifica que se redirige correctamente
        assert self.driver.current_url == "http://localhost:5000/my-communities"

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_show_community_details(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user1@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Navegar a comunidades
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "My Communities").click()

        self.driver.find_element(By.LINK_TEXT, "Second Community").click()
        name = self.driver.find_element(By.TAG_NAME, "h2").text
        description = self.driver.find_element(By.CLASS_NAME, "text-muted").text
        assert name == "Second Community", "El nombre de la comunidad no coincide."
        assert description == "This is the second test community.", "La descripción de la comunidad no coincide."
        members = self.driver.find_elements(By.CSS_SELECTOR, ".list-group-item .text-muted")
        assert len(members) > 0, "No se encontraron miembros listados."

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_list_not_joined_communities(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user2@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Abrir el menú lateral
        menu_button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".hamburger"))
        )
        menu_button.click()

        # Esperar a que se cargue el elemento del menú lateral
        community_menu_item = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "Explore Communities"))
        )
        community_menu_item.click()

        # Verificar que estamos en la página de comunidades no unidas
        assert "Communities You Haven't Joined" in self.driver.page_source, "No se cargó la página de comunidades no unidas correctamente"

        # Verificar que hay comunidades listadas
        communities = self.driver.find_elements(By.CSS_SELECTOR, ".list-group-item")
        assert len(communities) > 0, "No hay comunidades disponibles para unirse"

        for community in communities:
            community_name = community.find_element(By.TAG_NAME, "strong").text
            join_button = community.find_element(By.TAG_NAME, "button")
            assert join_button.text == "Join", f"No se encontró el botón 'Join' en la comunidad {community_name}"

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_joim_community(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user2@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Abrir el menú lateral
        menu_button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".hamburger"))
        )
        menu_button.click()

        # Esperar a que se cargue el elemento del menú lateral
        community_menu_item = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "Explore Communities"))
        )
        community_menu_item.click()

        # Verificar que estamos en la página de comunidades no unidas
        assert "Communities You Haven't Joined" in self.driver.page_source, "No se cargó la página de comunidades no unidas correctamente"

        # Verificar que hay comunidades listadas
        communities = self.driver.find_elements(By.CSS_SELECTOR, ".list-group-item")
        assert len(communities) > 0, "No hay comunidades disponibles para unirse"

        # Unirse a la primera comunidad de la lista
        first_community_name = communities[0].find_element(By.TAG_NAME, "strong").text
        communities[0].find_element(By.TAG_NAME, "button").click()

        # Navegar a 'Mis comunidades' y verificar que la comunidad aparece allí
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "My Communities").click()

        # Verificar que la comunidad unida está listada
        joined_communities = self.driver.find_elements(By.CSS_SELECTOR, ".list-group-item h5 a")
        joined_community_names = [community.text for community in joined_communities]
        assert first_community_name in joined_community_names, f"La comunidad '{first_community_name}' no aparece en 'Mis comunidades'."

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()

    def test_empty_not_joined_communities(self):
        # Navegación en la aplicación web
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(927, 1012)

        # Interactuar con el login
        self.driver.find_element(By.LINK_TEXT, "Login").click()
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user1@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()

        # Abrir el menú lateral
        menu_button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".hamburger"))
        )
        menu_button.click()

        # Esperar a que se cargue el elemento del menú lateral
        community_menu_item = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "Explore Communities"))
        )
        community_menu_item.click()

        # Verificar que el mensaje correcto esté visible
        no_communities_message = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".text-center.text-muted"))
        )
        assert no_communities_message.text == "You have joined all existing communities.", \
            "El mensaje no coincide o no está presente."

        # Cerrar sesión
        self.driver.find_element(By.CSS_SELECTOR, ".text-dark").click()
        self.driver.find_element(By.LINK_TEXT, "Log out").click()
